/**
 * @desc: implementa a leitura do post "enctype='multipart/form-data'"
 */

class FileImpl: public cweb::file
{public:
	char* name = NULL;
	long  size = 0;
	char* data = NULL;
	char  type = 0;
	char* typeStr = NULL;

	char* name() { return name; }
	long  size() { return size; }
	char* data() { return data; }
	char  type() { return type; }
	char* typeStr() {return typeStr; }
};


class Mult: public Post
{private:
	struct cmp_str // use this to compare strings (C-style) in map function to find key map
	{
		bool operator()(char const *a, char const *b) const
		{
			return std::strcmp(a, b) < 0;
   		}
	};
	map<const char*, cweb::file*, cmp_str> _map;
	char *boundary = NULL;
	int boundary_size = 0;
	char *_stdin = NULL;
	long stdin_size = 0;
	int idx = 0;
	char *post = NULL;
 public:
	virtual bool init(const long max_size)
 	{
		///////////////////////////////////////////////////////////////////
		// verifica o tamanho do post, verfica o tamanho dos buffers
		///////////////////////////////////////////////////////////////////
		char *strctlen = getenv("CONTENT_LENGTH");
		if(strctlen == NULL) {
			Error("CWEB::IN - NO CONTENT_LENGTH\ngetenv(\"CONTENT_LENGTH\") = NULL\n"
			"Post type is \"multipart/form-data\"");
		}
		stdin_size = strtol(strctlen, NULL, 0);
		if(stdin_size == 0L) {
			Error("CWEB::IN - strtol()\nstrtol() = 0L\ngetenv(\"CONTENT_LENGTH\") = \"%s\"\n"
			"POST type is \"multipart/form-data\"\nerro is %d\nstr erro is \"%s\"",
			strctlen, errno, strerror(errno));
		}
		if(stdin_size < 0L) {
			Error("CWEB::IN - CONTENT_LENGTH is lesser than 1\nCONTENT_LENGTH = %ld\n"
			"getenv(\"CONTENT_LENGTH\") = \"%s\"\nPOST type is \"multipart/form-data\"",
			stdin_size, strctlen);
		}
		
		if(stdin_size > max_size && max_size != 0)
		{
			Error("CWEB::IN - size of input data recieve by HTTP POST METHOD is bigger"
			"bigger than max size allowed for this type of input.\n"
			"getenv(\"CONTENT_LENGTH\") = \"%s\"\nCONTENT_LENGTH = %ld bytes\n"
			"Maximum size for HTTP POST METHOD -\"multipart/form-data\" "
			"= %ld bytes\nYou can change this size.\nSee documentation for more details",
			strctlen, stdin_size, max_size);
		}
		
		init_boundary();
	
		if(_stdin != NULL) {
			delete[] _stdin;
		}
		_stdin = new char[stdin_size +1];
		
		size_t read = fread(_stdin, sizeof(char), stdin_size, stdin);
		if(read != static_cast<size_t>(stdin_size)) {
			Error("CWEB::IN - Reading post content and putting it into postStr.\n"
			"Read in post content: %ld\nCONTENT_LENGTH string: \"%s\"\nCONTENT_LENGTH: %ld\n"
			"POST type is \"multipart/form-data\"\nerro is %d\nstr erro is \"%s\"",
			read, strctlen, stdin_size, errno, strerror(errno));
		}
		_stdin[stdin_size] = '\0';
		
		Warn("stdin is \"%s\"", _stdin);
		Warn("boundary is \"%s\"", boundary);
		
		fill_map();
		return true; // foi possível inicializar o HTTP REQUEST METHOD POST no mapa de busca
	}
 
	const char* type()
	{
		return "multipart/form-data";
	}

 private:
	void init_boundary()
	{
		// não precisa de verificar, se é NULL pois já foi verificado antes
		char *ct = getenv("CONTENT_TYPE");
		ct = strstr(ct, "boundary=");
		if(ct == NULL) {
			Error("CWEB::IN - Reading HTTP POST CONTENT_TYPE.\n"
			"POST type is \"multipart/form-data\"\n"
			"getenv(\"CONTENT_TYPE\") has no \"boundary=\" parameter.\n"
			"getenv(\"CONTENT_TYPE\") is \"%s\"", getenv("CONTENT_TYPE"));
		}
		
		boundary = &ct[9]; // set o boundary no character imediatamente após o '='.
		ct = &ct[9];
		char *end_boundary = strchr(ct, ';');
		if(end_boundary != NULL) { // para o caso de haver mais de um atributo na variável
			boundary_size = static_cast<int>(end_boundary - boundary);
		} else {
			boundary_size = strlen(boundary);
		}
	}
	
	void fill_map()
	{
		data = _stdin;
		idx = 0;
		
		parser_header_stdin();
		
		while(idx < stdin_size)
		{
			FileImpl& file = *(new FileImpl);
			if(file == NULL) {
				Error("CWEB::POST - Allocated Space for cweb::file.\n Size is %d\n"
				"POST type is \"application/x-www-form-urlencoded\"\nerro is %d\n"
				"str erro is \"%s\"", sizeof(FileImpl), errno, strerror(errno));
			}
			parser_attriute(file);
			parser_type(file);
			parser_data(file);
		}
	}
	
	void parser_header_stdin()
	{
		if(stdin_size <= boundary_size) {
			Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n"
			"Size of HTTP POST is lesser than boundary size.\n"
			"Header of stdin is wrong.\nExpected boundary value.\nBoundary = \"%s\"\n"
			"Boundary size is %d\nstdin size is %ld\nstdin is \"%s\"",
			doundary, doundary_size, stdin_size, _stdin);
		}
		
		// check the header of the stdin
		if(strncmp(post, boundary, boundary_size) != 0) {
			Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n"
			"Header of stdin is wrong.\nExpected boundary value.\nBoundary = \"%s\"\n"
			"Boundary size is %d\nstdin is \"%s\"", doundary, doundary_size, _stdin);
		}
		
		if(data_jump(boundary_size) == false) {
			Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n"
			"Trying to get out of limit of HTTP POST.\nPOST size is %d\n"
			"Already read %ld bytes\nTrying to read more %d bytes\nPost is \"%s\"\n"
			"Current stream is \"%s\"", stdin_size, idx, boundary_size, _stdin, data);
		}
		
		//check if the stdin is empty
		if(strncmp(post, "--\r\n", 4) == 0) {
			Warn("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n"
			"Body of HTTP POST is empty");
			return;
		}
		
		if(strncmp(post, "\r\n", 2) != 0) {
			Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n"
			"Header of stdin is wrong.\nExpected boundary + \"\\r\\n\".\nBoundary = \"%s\"\n"
			"Boundary size is %d\nstdin is \"%s\"", doundary, doundary_size, _stdin);
		}
		
		if(data_jump(2) == false) {
			Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n"
			"Trying to get out of limit of HTTP POST.\nPOST size is %d\n"
			"Already read %ld bytes\nTrying to read more %d bytes\nPost is \"%s\"\n"
			"Current stream is \"%s\"", stdin_size, idx, 2, _stdin, data);
		}
	}
	
	void parser_attriute(FileImpl& file)
	{
		if(data_check(38) == false) {
			Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n"
			"Trying to get out of limit of HTTP POST.\nPOST size is %d\n"
			"Already read %ld bytes\nTrying to read more %d bytes\nPost is \"%s\"\n"
			"Current stream is \"%s\"", stdin_size, idx, boundary_size, _stdin, data);
		}
		
		if(strncmp(data, "Content-Disposition: form-data; name=\"", 38) != 0) {
			Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n");
		}
		
		char *key = data_update(38);
		data = strchr(key, '"'); // descobre o nome da key do map
		if(data == NULL) {
			Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n");
		}
		data = '\0'; // troca o character '"' por '\0' -> finaliza a string
		
		if(data_jump(1) == false) {
			Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n"
			"Trying to get out of limit of HTTP POST.\nPOST size is %d\n"
			"Already read %ld bytes\nTrying to read more %d bytes\nPost is \"%s\"\n"
			"Current stream is \"%s\"", stdin_size, idx, 1, _stdin, data);
		}
		
		if(strncmp(data, "; filename=\"", 12) == 0) {
			file.name = data_update(12);
			data = strchr(key, '"'); // descobre o nome da key do map
			if(data == NULL) {
				Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n");
			}
			data = '\0'; // troca o character '"' por '\0' -> finaliza a string
			data_jump(1);
		}
		
		data = strchr('\n');
		if(data == NULL) {
			Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n");
		}
		data_jump(1);
		
		pair< map<const char*, cweb::file*, cmp_str>::iterator, bool> res;
		res = _map.insert(key, &file);
		if(res->second == false) {
			Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n"
			"Key already exists in map.\nKey is \"%s\"", key);
		}
	}
	
	void parser_type(FileImpl& file)
	{
		char *endLine = strchr('\n');
		if(data == NULL) {
			Error("CWEB::IN - HTTP POST type is \"multipart/form-data\"\n");
		}
		
		if((endLine - data) == 0)
	}
	
	inline bool data_jump(const int jump)
	{
		if(stdin_size <= idx + jump) return false;
		
		idx += jump;
		data = &data[idx];
		return true;
	}
	
	inline bool data_check(const int jump)
	{
		if(stdin_size <= idx + jump)  return false;
		
		return true;
	}
	
	inline char* data_update(const int jump)
	{
		idx += jump;
		data = &data[idx];
		return data;
	}
};















































