


>> implementar uma nova versão de sessão.
	* Ao invés de usar um arquivo (texto ou binário) gerenciado por mim para guardar a sessão, utilizar o banco de dados para guardar a sessão.
	* Disvantagens: perda em performace - pode ser afetado (ficar mais lento) e criar uma dependência com o banco de dados utilizado.
	* Vantagens: maior simplicidade no gerênciamento e segurança contra certos ataques.

>> implementar o websocket (ws) na biblioteca

>> implementar o novo algoritmo para ler os métodos get e post (padrão) e cookie, de forma mais otimizada.
Ou seja, ler a string deles apenas uma vez para fazer a decodificação.
cweb::decode() -> este método tem que ser modificado para melhor performance e os métodos que chamam ele precisam mudar.

>> implementar try-cath em todas as funções da biblioteca.

>> implementar smartpointer na biblioteca.

>> implementar novas formas de sessão:
	* utilizar o memmory_map ao invés das funções fopen()/read()/write()
	isto poderá ganhar um maior ganho de performance (em certos cenários), e tornar o gerenciamento da sessão talvez mais confiável e simples.

>> implementar a solução para quando se deseja adicionar uma mesma tag "<?cweb #in "foo" ?>" várias vezes.
	A solução não pode permitir que as chamadas caiam em uma auto-recursividade, ou seja, dentro do mesmo código ser chamado a mesma tag (imediatamente ou mediatamente), pois neste caso se cairia em um loop-infinito.

>> cookie:: na função cweb::cookie::get() -> quando a chave não existir, não retornar nullptr, mas sim uma string vazia ("").
	@reason: diminuiu a chance de erro no código e torna o código menor e mais intuitívo. sempre se tem que verificar se o valor é nullptr, para na prática tornar este valor em uma string vazia, ideal é retornar já a string vazia, e se o usuário quiser, ele pode passar um valor bool& para verificar se a chave existe de fato.

































